import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import { Platform, NativeModules } from 'react-native';

// Arquivos de tradu√ß√£o
import ptBR from '../locales/pt-BR.json';
import enUS from '../locales/en-US.json';

// Pa√≠ses que falam portugu√™s
export const PORTUGUESE_COUNTRIES = [
  'BR', // Brasil
  'PT', // Portugal
  'AO', // Angola
  'MZ', // Mo√ßambique
  'CV', // Cabo Verde
  'GW', // Guin√©-Bissau
  'ST', // S√£o Tom√© e Pr√≠ncipe
  'TL', // Timor-Leste
  'MO', // Macau
];

// Pa√≠ses que falam ingl√™s
export const ENGLISH_COUNTRIES = [
  'US', // Estados Unidos
  'GB', // Reino Unido
  'CA', // Canad√°
  'AU', // Austr√°lia
  'NZ', // Nova Zel√¢ndia
  'IE', // Irlanda
  'ZA', // √Åfrica do Sul
  'IN', // √çndia
  'SG', // Singapura
  'HK', // Hong Kong
  'MY', // Mal√°sia
  'PH', // Filipinas
  'NG', // Nig√©ria
  'KE', // Qu√™nia
  'GH', // Gana
  'UG', // Uganda
  'ZW', // Zimb√°bue
  'BW', // Botsuana
  'MW', // Malawi
  'ZM', // Z√¢mbia
  'TZ', // Tanz√¢nia
  'RW', // Ruanda
  'ET', // Eti√≥pia
  'LR', // Lib√©ria
  'SL', // Serra Leoa
  'GM', // G√¢mbia
];

// Fun√ß√£o para obter locale do dispositivo sem react-native-localize
const getDeviceLocale = () => {
  try {
    // Para Android
    if (Platform.OS === 'android') {
      const locale = NativeModules.I18nManager?.locale || 'en-US';
      return locale;
    }
    // Para iOS
    else if (Platform.OS === 'ios') {
      const locale = NativeModules.SettingsManager?.settings?.AppleLocale || 
                    NativeModules.SettingsManager?.settings?.AppleLanguages?.[0] || 
                    'en-US';
      return locale;
    }
    // Fallback
    return 'en-US';
  } catch (error) {
    console.log('‚ùå Erro ao obter locale do dispositivo:', error);
    return 'en-US';
  }
};

// Detectar idioma autom√°tico baseado no locale do dispositivo
export const detectLanguage = (): 'pt' | 'en' => {
  const deviceLocale = getDeviceLocale();
  
  console.log('üîç Detectando idioma...');
  console.log('üì± Locale do dispositivo:', deviceLocale);
  
  if (deviceLocale) {
    const languageCode = deviceLocale.split('-')[0].toLowerCase();
    const countryCode = deviceLocale.split('-')[1]?.toUpperCase();
    
    console.log('üåç Idioma detectado:', languageCode);
    console.log('üåç Pa√≠s detectado:', countryCode);
    
    // PRIORIDADE 1: Verificar pelo c√≥digo de idioma primeiro
    if (languageCode === 'pt' || languageCode === 'pt-br' || languageCode === 'pt-pt') {
      console.log('‚úÖ Idioma √© portugu√™s, retornando: pt');
      return 'pt';
    }
    
    if (languageCode === 'en' || languageCode === 'en-us' || languageCode === 'en-gb') {
      console.log('‚úÖ Idioma √© ingl√™s, retornando: en');
      return 'en';
    }
    
    // PRIORIDADE 2: Verificar pelo pa√≠s se o idioma n√£o foi reconhecido
    if (countryCode && PORTUGUESE_COUNTRIES.includes(countryCode)) {
      console.log('‚úÖ Pa√≠s fala portugu√™s, retornando: pt');
      return 'pt';
    }
    
    if (countryCode && ENGLISH_COUNTRIES.includes(countryCode)) {
      console.log('‚úÖ Pa√≠s fala ingl√™s, retornando: en');
      return 'en';
    }
    
    console.log('‚ùì Idioma/pa√≠s n√£o reconhecido, usando padr√£o: en');
  } else {
    console.log('‚ùå Nenhum locale encontrado, usando padr√£o: en');
  }
  
  // Padr√£o para ingl√™s se n√£o conseguir detectar
  return 'en';
};

// Configura√ß√£o do i18next
i18n
  .use(initReactI18next)
  .init({
    compatibilityJSON: 'v4',
    resources: {
      pt: {
        translation: ptBR,
      },
      en: {
        translation: enUS,
      },
    },
    lng: 'pt', // Idioma padr√£o, ser√° sobrescrito pelo LanguageContext
    fallbackLng: 'en',
    interpolation: {
      escapeValue: false,
    },
    react: {
      useSuspense: false, // Importante para React Native
    },
  });

export default i18n; 